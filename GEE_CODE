// Load the shapefile as a FeatureCollection
var shapefile = ee.FeatureCollection('projects/ee-nmashhad/assets/NK_boundar');

// Define the time range
var startDate = '2021-01-01';
var endDate = '2021-12-30';

// Load Landsat 9 Collection and filter it based on date, region, and cloud cover
var landsat = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
    .filterDate(startDate, endDate)
    .filterBounds(shapefile)
    .filter(ee.Filter.lt('CLOUD_COVER', 20)); // Retain images with less than 20% cloud cover

// Function to apply scaling factors to Landsat 9 bands
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.*').multiply(0.0000275).add(-0.2); // Scale optical bands
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0); // Scale thermal bands
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Apply scaling factors to the Landsat collection
var scaledLandsat = landsat.map(applyScaleFactors);

// Function to calculate spectral indices
function calculateIndices(image) {
  var nir = image.select('SR_B5');
  var red = image.select('SR_B4');
  var green = image.select('SR_B3');
  var blue = image.select('SR_B2');
  var swir1 = image.select('SR_B6');
  var swir2 = image.select('SR_B7');

  var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
  var evi = image.expression(
      '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
      { 'NIR': nir, 'RED': red, 'BLUE': blue }
  ).rename('EVI');
  var pvi = image.expression(
      '((NIR - RED) / sqrt(NIR**2 + RED**2))',
      { 'NIR': nir, 'RED': red }
  ).rename('PVI');
  var ndbi = swir1.subtract(nir).divide(swir1.add(nir)).rename('NDBI');
  var nbr = nir.subtract(swir2).divide(nir.add(swir2)).rename('NBR');
  var ndwi = nir.subtract(swir1).divide(nir.add(swir1)).rename('NDWI');

  return image.addBands([ndvi, evi, pvi, ndbi, nbr, ndwi]);
}

// Apply index calculation to the scaled collection
var landsatWithIndices = scaledLandsat.map(calculateIndices);

// Create a median composite from the processed collection and clip it to the shapefile boundary
var medianComposite = landsatWithIndices.median().clip(shapefile);

// Visualization parameters for the median composite
var visualization = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'], // RGB visualization
  min: 0.0,
  max: 0.3,
};

// Add the composite to the map
Map.centerObject(shapefile, 10); // Center the map to the shapefile region
Map.addLayer(medianComposite, visualization, 'Landsat 9 Median Composite');

// Export the median composite to Google Drive
Export.image.toDrive({
  image: medianComposite,
  description: 'Landsat9_Median_Composite',
  scale: 30, // Spatial resolution
  region: shapefile.geometry(), // Export region
  folder: 'GEE_Exports', // Google Drive folder name
  fileNamePrefix: 'Landsat9_Median', // File name prefix
  maxPixels: 1e13
});

// Visualization parameters for NDVI
var ndviVis = {
  min: 0.0,
  max: 1.0,
  palette: ['blue', 'white', 'green'] // NDVI color palette
};

// Add NDVI layer to the map
Map.addLayer(medianComposite.select('NDVI'), ndviVis, 'NDVI');

// Export spectral indices to Google Drive
Export.image.toDrive({
  image: medianComposite.select(['NDVI', 'EVI', 'PVI', 'NDBI', 'NBR', 'NDWI']),
  description: 'Landsat9_Indices',
  scale: 30, // Spatial resolution
  region: shapefile.geometry(), // Export region
  folder: 'GEE_Exports', // Google Drive folder name
  fileNamePrefix: 'Landsat9_Indices', // File name prefix
  maxPixels: 1e13
});

// GEDI dataset handling and export
var gediDatasets = [
  // List of GEDI Level 4A assets
  'LARSE/GEDI/GEDI04_A_002/GEDI04_A_2021162232055_O14147_03_T03969_02_002_02_V002',
  // Add additional datasets as needed
];

// Clip and export each GEDI dataset
gediDatasets.forEach(function(datasetId, index) {
  var dataset = ee.FeatureCollection(datasetId).filterBounds(shapefile);
  Export.table.toAsset({
    collection: dataset,
    description: 'Clipped_GEDI_Dataset_' + index,
    assetId: 'projects/ee-nmashhad/assets/Clipped_GEDI_Dataset_' + index
  });
  Map.addLayer(dataset, {}, 'Clipped GEDI Dataset ' + index); // Visualize on the map
});

// Export all GEDI datasets as a merged table
var mergedGEDI = ee.FeatureCollection(gediDatasets.map(function(assetId) {
  return ee.FeatureCollection(assetId);
})).flatten();

Export.table.toDrive({
  collection: mergedGEDI,
  description: 'GEDI_Level4A_Merged',
  fileFormat: 'CSV'
});
